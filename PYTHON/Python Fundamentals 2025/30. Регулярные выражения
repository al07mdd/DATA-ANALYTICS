# Регулярные выражения
Регулярные выражения используются для:
- Поиска текста по шаблону
- Проверки формата строки
- Замены текста
- Разделения строк
# Модуль `re`
import re
Основные функции модуля `re`:
- `re.search(pattern, string)` – ищет первое совпадение шаблона в строке.
- `re.match(pattern, string)` – проверяет, начинается ли строка с шаблона.
- `re.findall(pattern, string)` – возвращает список всех совпадений.
- `re.finditer(pattern, string)` – возвращает итератор с совпадениями.
- `re.sub(pattern, repl, string)` – заменяет найденные совпадения.
- `re.split(pattern, string)` – разделяет строку по шаблону.
## Функция `findall`
# re.findall(pattern, string)
text = "Python 3.9, Java 17, C++ 14"

numbers = re.findall(r"\d+", text)  # Поиск всех чисел
print(numbers)
# Основные символы в регулярных выражениях
| Символ | Описание                          |
|--------|-----------------------------------|
| `\d`   | Любая цифра (`0–9`)               |
| `\D`   | Любой символ, кроме `\d`          |
| `\w`   | Буквы, цифры и `_`                |
| `\W`   | Любой символ, кроме `\w`          |
| `\s`   | Пробел, `\t`, `\n`                |
| `\S`   | Любой символ, кроме `\s`          |
| `.`    | Любой символ, кроме `\n`          |
text = "\tPython 3.12, Java 17, C++ 14!\n"

print("Цифры:", re.findall(r"\d", text))
print("Двузначные цифры:", re.findall(r"\d\d", text))
print("НЕ цифры:", re.findall(r"\D", text))
print("Буквы, цифры, _:", re.findall(r"\w", text))
print("НЕ буквы, цифры, _:", re.findall(r"\W", text))
print("Пробелы:", re.findall(r"\s", text))
print("НЕ пробелы:", re.findall(r"\S", text))
print("Все символы (кроме \\n):", re.findall(r".", text))
pattern = "\d"  # ОШИБКА: \d будет воспринято как управляющий символ
print(re.findall(pattern, "Price: 123"))
## Классы символов
| Запись      | Описание                                      |
|-------------|-----------------------------------------------|
| `[afc]`     | Один из символов `a`, `f` или `c`             |
| `[0-9]`     | Любая цифра от `0` до `9` (аналог `\d`)       |
| `[a-z]`     | Любая строчная буква от `a` до `z`            |
| `[A-Z]`     | Любая заглавная буква от `A` до `Z`           |
| `[a-zA-Z]`  | Любая буква (заглавная или строчная)          |
| `[^abc]`    | Любой символ, **кроме** `a`, `b` или `c`      |
| `[^0-9]`    | Любой символ, **кроме** цифры                 |
text = "Report, report, report2, report10"

print("Буквы r или R в слове:", re.findall(r"[rR]eport", text))
print("Все цифры:", re.findall(r"[0-9]", text))
print("Заглавные буквы:", re.findall(r"[A-Z]", text))
print("Строчные буквы:", re.findall(r"[a-z]", text))
print("Все буквы:", re.findall(r"[a-zA-Z]", text))
print("Все, кроме цифр:", re.findall(r"[^0-9]", text))
## Квантификаторы
| Квантификатор | Описание                          |
|---------------|-----------------------------------|
| `+`           | Один или более раз (`1, 2, 3...`) |
| `*`           | Ноль или более раз (`0, 1, 2...`) |
| `?`           | Ноль или один раз (`0, 1`)        |
| `{n}`         | Ровно `n` раз                     |
| `{n,}`        | `n` и более раз                   |
| `{n,m}`       | От `n` до `m` раз                 |
text = """
Orders: ID123, ID4567, ID89
Numbers: 123-45-67, 321-45-67
Prices: 100$, 199.50$, 99.99€, 0.49€, .99€
File names: report.txt, report2.txt, report10.txt
"""

print("Одна или более цифр:", re.findall(r"\d+", text))
print("Телефонные номера (формата xxx-xx-xx):", re.findall(r"\d{3}-\d{2}-\d{2}", text))
print("Цены (числа с десятичной точкой):", re.findall(r"\d+\.\d+", text))
print("ID-коды:", re.findall(r"ID\d{2,}", text))
print("Имена файлов 0+ цифр:", re.findall(r"report\d*.txt", text))
print("Имена файлов 0/1 цифр:", re.findall(r"report\d?.txt", text))
print("Имена файлов 1/2 цифр:", re.findall(r"report\d{1,2}.txt", text))
### Жадные и ленивые квантификаторы
| Квантификатор | Тип      | Описание                                                                       |
|----------------|----------|--------------------------------------------------------------------------------|
| `*`            | Жадный   | Захватывает **максимально возможное** количество символов                      |
| `*?`           | Ленивый  | Захватывает **минимально возможное** количество символов                       |
| `+`            | Жадный   | Захватывает **минимум 1 символ**, но **как можно больше**                      |
| `+?`           | Ленивый  | Захватывает **минимум 1 символ**, но **как можно меньше**                      |
| `{n,m}`        | Жадный   | Захватывает **от n до m**, но **как можно больше**                             |
| `{n,m}?`       | Ленивый  | Захватывает **от n до m**, но **как можно меньше**                             |
text = "<div>Hello</div><div>World</div>"

greedy = re.findall(r"<.*>", text)  # Жадный
lazy = re.findall(r"<.*?>", text)   # Ленивый

print(greedy)
print(lazy)
text = "report678"
pattern_l = r"report\d{1,3}?"
pattern_g = r"report\d{1,3}"
print(re.findall(pattern_l, text))
print(re.findall(pattern_g, text))
**Сопоставь шаблон с тем, что он найдёт:**

1. `\d+`                c) Последовательность цифр 
2. `[a-zA-Z0-9]+`       b) Последовательность букв и цифр
3. `\s+`                a) Несколько подряд идущих пробелов
4. `[^a-zA-Z0-9]+`      d) Последовательность НЕ букв и НЕ цифр

**Варианты:**

a) Несколько подряд идущих пробелов  
b) Последовательность букв и цифр  
c) Последовательность цифр  
d) Последовательность НЕ букв и НЕ цифр  
re.findall("\d+", "Value: 123")
В каком шаблоне используется ленивый квантификатор?

a) `<.+>`
b) `<.*>`
# c) `<.*?>`
d) `.*[a-z]`
# Cпециальные символы
text = "report.txt, report2.txt, report10.txt, some_txt_report, some_report_txt, reports\\report.txt, report2.txt"

print("Имена файлов с txt:", re.findall(r"\w+.txt", text))

# Имена файлов с расширением .txt
print("Имена файлов с расширением .txt:", re.findall(r"\w+\.txt", text))

# Имена файлов в папке
print("Имена файлов в папке:", re.findall(r"\w+\\\w+\.\w+", text))
## Якоря
| Якорь | Описание            |
|-------|---------------------|
| `^`   | Начало строки       |
| `$`   | Конец строки        |
| `\b`  | Граница слова       |
| `\B`  | Не граница слова    |
text = "Hello world! Welcome to world"

print("Слово в начале строки:", re.findall(r"^\w+", text))
print("Слово в конце строки:", re.findall(r"\w+$", text))


text2 = "category wildcat education _cat_ catalog"

print("Слова с 'cat' внутри:", re.findall(r"\w+cat\w+", text2))
print("Слова с 'cat' в начале слов:", re.findall(r"\bcat\w*", text2))
print("Слова с 'cat' в конце слов:", re.findall(r"\w*cat\b", text2))

text3 = "X123X 234 4567X X999"
print("Числа внутри строк:", re.findall(r"\B\d+\B", text3))
## Альтернативы
import re
text = "Meeting on 2024-05-10 or 10/05/2024 at 14:30"

# Найдём даты в формате YYYY-MM-DD или DD/MM/YYYY
print("Даты:", re.findall(r"\d{4}-\d{2}-\d{2}|\d{2}/\d{2}/\d{4}", text))
## Группы
text = "Order ID: 12345, Invoice No: 67890"

# Найдём ID заказа и счёта
match = re.search(r"Order ID: (\d+), Invoice No: (\d+)", text)

if match:
    print("ID заказа:", match.group(1))
    print("Номер счёта:", match.group(2))
text = "USD 100, EUR 200, GBP 300"

# Найдём суммы, не выделяя валюту
matches = re.findall(r"(?:USD|EUR|GBP) (\d+)", text)
print("Суммы:", matches)

# Найдём суммы и валюту
matches = re.findall(r"(USD|EUR|GBP) (\d+)", text)
print("Суммы:", matches)
# Найдём суммы, не выделяя валюту
matches = re.findall(r"(USD|EUR|GBP) (?:\d+)", text)
print("Суммы:", matches)
matches = re.findall(r"(USD|EUR|GBP) (?:\d+)", text)
print("Суммы:", matches)
text = "USD 100, EUR 200, GBP 300"

# Найдём суммы, не выделяя валюту
matches = re.findall(r"(USD)?(EUR|GBP)? (\d+)", text)
print("Суммы:", matches)
# Функции модуля `re`
## Функция `re.match`
Объект Match содержит информацию о найденном фрагменте, включая:
- `.group()` – само совпадение.
- `.start()` – индекс начала совпадения.
- `.end()` – индекс конца совпадения.
- `.span()` – кортеж (start, end), показывающий границы совпадения.
text = "ID12345 is confirmed. ID23456 is confirmed"

# Проверяем, начинается ли строка с "ID" + цифры
match = re.match(r"ID\d+", text)

if match:
    print("Объект Match:", match)
    print("Само совпадение:", match.group())
    print("Диапазон совпадения:", match.span())
else:
    print("Нет совпадения.")
## Функция `re.search`
text = "Order ID: 12345, Invoice No: 67890, Ref: ABC9876"

# Найдём первое число в тексте
match = re.search(r"\d+", text)

if match:
    print("Объект Match:", match)
    print("Само совпадение:", match.group())
    print("Индекс начала:", match.start())
    print("Индекс конца:", match.end())
    print("Диапазон совпадения:", match.span())
else:
    print("Нет совпадения.")
## Флаг `re.IGNORECASE`
text = "Python is popular."

# Найдём слово "python" без учёта регистра
match = re.search(r"python", text, re.IGNORECASE)

if match:
    print("Найдено:", match.group())
## Функция `re.finditer`
text = "Order ID: 12345, Invoice No: 67890, Ref: ABC9876"

# Найдём все числа в тексте
matches = re.finditer(r"\d+", text)

for match in matches:
    print("Объект Match:", match)
    print("Само совпадение:", match.group())
    print("Диапазон совпадения:", match.span())
    print()
## Функция `re.split`
text = """Python is popular. It is used in web development, data science, 
and automation. Many developers choose Python for its simplicity."""

# Разделяем строку по запятым, пробелам и точкам
words = re.split(r"[,\s.]+", text)

print("Список слов:", words)
## Функция `re.sub`
# re.sub(pattern, repl, string)
text = "apple,   banana ,  orange ,grape"

# Удаляем лишние пробелы перед и после запятых
clean_text = re.sub(r"\s*,\s*", ", ", text)

print("Отформатированный текст:", clean_text)
**Сопоставь якорь с его назначением:**

1. `^`  
2. `$`  
3. `\b`  
4. `\B`  

**Варианты:**

a) Указывает на конец строки  
b) Указывает на начало строки  
c) Обозначает границу слова  
d) Указывает, что позиция не является границей слова
В чём отличие `re.match()` от `re.search()`?
# Домашнее задание
## Извлечение дат

1. Импортируем модуль `re` для работы с регулярными выражениями
2. Получаем или загружаем текст, в котором нужно найти даты
3. Определяем регулярное выражение, которое учитывает три формата:
   - DD/MM/YYYY
   - DD-MM-YYYY
   - DD.MM.YYYY
4. Шаблон включает:
   - две цифры для дня: `\d{2}`
   - разделитель: `[\/\-\.]`
   - две цифры для месяца: `\d{2}`
   - тот же разделитель (с помощью обратной ссылки `\1`, если хотим строго один тип в дате)
   - четыре цифры для года: `\d{4}`
5. Используем `re.findall()` для поиска всех совпадений в тексте
6. Получаем список всех найденных дат в различных форматах
7. При необходимости — фильтруем или форматируем даты дальше
## Разделение списка тегов

1. Получаем строку с тегами от пользователя (через `input()` или из переменной)
2. В строке могут быть любые разделители: запятые, точки с запятой, косые черты, пробелы и т.п.
3. Используем `re.split()` с шаблоном, который разделяет по любому из следующих символов:
   - запятая `,`
   - точка с запятой `;`
   - слэш `/`
   - пробел (один или несколько) — `\s+`
4. Получаем список всех элементов после разделения
5. Применяем генератор списка или `filter`:
   - убираем пустые строки
   - удаляем лишние пробелы вокруг каждого тега с помощью `strip()`
6. Получаем очищенный список тегов
7. При необходимости можно удалить дубликаты или отсортироваь результат

# Практические задания
## Проверка пароля
Реализуйте программу, которая должна проверить, соответствует ли введённый пароль следующим требованиям:
- Минимум 8 символов
- Есть хотя бы одна заглавная буква
- Есть хотя бы одна строчная буква
- Есть хотя бы одна цифра
# Решение
## Извлечение IP-адресов
Программа должна найти все IPv4-адреса в строке.
IPv4-адрес состоит из четырёх чисел от 0 до 255, разделённых точками.
# Решение
