🔸🔸🔸 УРОК 22. LAMBDA-ФУНКЦИИ. ФУНКЦИИ ВЫСШЕГО ПОРЯДКА 🔸🔸🔸

📌📌 ПЕРЕДАЧА ФУНКЦИЙ В КАЧЕСТВЕ АРГУМЕНТОВ

📌 Функции — это объекты. Их можно:

🔸* присваивать переменным,
🔸* передавать в другие функции,
🔸* хранить в коллекциях.

✅
def square(x):
return x \* x

def apply\_function(func, value):
return func(value)

print(apply\_function(square, 5))
print(apply\_function(abs, -10))

✅ Функции в коллекциях:

def add(x, y): return x + y
def mul(x, y): return x \* y

operations = {"+": add, "*": mul}
print(operations\["*"]\(3, 4))

📌📌 LAMBDA-ФУНКЦИИ

🔸 Анонимные функции (короткая форма записи):

✅
square = lambda x: x \*\* 2
print(square(5))

add = lambda x, y: x + y
print(add(2, 3))

✅ Lambda как аргумент функции:

def apply\_func(func, nums):
return \[func(x) for x in nums]

print(apply\_func(lambda x: x + 10, \[1, 2, 3]))

📌 Особенности:

* всегда возвращают результат выражения
* одна строка, без инструкций if/for

📌📌 ПАРАДИГМЫ ПРОГРАММИРОВАНИЯ

🔸 Императивная — пошаговые инструкции
🔸 Процедурная — всё в функциях
🔸 ООП — классы и объекты
🔸 Функциональная — функции без изменения состояния
🔸 Декларативная — описываем *что*, а не *как*

📌📌 ФУНКЦИОНАЛЬНОЕ ПРОГРАММИРОВАНИЕ

🔸 Основы:

* чистые функции
* неизменяемость
* функции как объекты
* функции высшего порядка
* рекурсия вместо циклов

📌📌 ФУНКЦИИ ВЫСШЕГО ПОРЯДКА

🔸 Функции, которые принимают и/или возвращают другие функции.

✅
def high\_order(f):
return f(5)

print(high\_order(lambda x: x \* 2))

📌📌 ФУНКЦИИ `MAP`, `FILTER`, `REDUCE`

🔸 `map(func, iterable)` — применяет функцию ко всем элементам
✅
numbers = \[1, 2, 3]
print(list(map(lambda x: x\*\*2, numbers)))

🔸 `filter(func, iterable)` — отбирает элементы по условию
✅
print(list(filter(lambda x: x % 2 == 0, \[1, 2, 3, 4])))

🔸 `reduce(func, iterable)` — сводит всё к одному значению
✅
from functools import reduce
print(reduce(lambda x, y: x + y, \[1, 2, 3, 4]))

📌 ЗАМЕНА ФУНКЦИИ `MAP`, `REDUCE`, `FILTER`
✅
nums = [1, 2, 3, 4]

🔸# vs map()
sq = [n * n for n in nums]
print(sq)

🔸# vs reduce()
acc = nums[0]
for n in nums[1:]:
acc = acc * n

🔸# vs filter()
even = [n for n in nums if n % 2 == 0]
print(even)  # [2, 4]

print(acc)

📌📌 ФУНКЦИИ `ANY` И `ALL`

🔸 `any()` — True, если хотя бы один элемент истиный
🔸 `all()` — True, если все элементы истины
✅
data = \[0, 1, None]
print(any(data))  # True
print(all(data))  # False

📌📌 КЛЮЧ `key` В ФУНКЦИЯХ `sorted`, `min`, `max`

🔸 `sorted(iterable, key=func)` — сортировка по критерию
✅
words = \['banana', 'apple', 'kiwi']
print(sorted(words, key=len))

🔸 Lambda-функция как ключ:
✅
students = \[("Alice", 25), ("Bob", 20)]
print(sorted(students, key=lambda x: x\[1]))

🔸 `min()` / `max()` с ключом
✅
words = \["apple", "banana", "grapefruit"]
print(max(words, key=len))

