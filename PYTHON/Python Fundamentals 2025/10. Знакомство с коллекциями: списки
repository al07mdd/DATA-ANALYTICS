🔸🔸🔸 УРОК 10. ЗНАКОМСТВО С КОЛЛЕКЦИЯМИ: СПИСКИ 🔸🔸🔸

📌📌 КОЛЛЕКЦИИ
Коллекции — это структуры данных, которые позволяют хранить и организовывать множество элементов. В Python существуют несколько встроенных типов коллекций, каждая из которых имеет свои особенности.

📌📌 ИЗМЕНЯЕМЫЕ ТИПЫ ДАННЫХ
Изменяемые типы данных — это структуры данных, которые позволяют изменять своё содержимое после создания объекта. Это означает, что можно добавлять, удалять или изменять элементы в существующем объекте.

📌📌 СПИСОК (LIST)
Список (list) — это упорядоченная изменяемая коллекция, которая может содержать элементы любых типов.

📌 Основные характеристики списка:
1. **Изменяемость**: Элементы списка можно изменять после его создания.
2. **Упорядоченность**: Элементы хранятся в порядке добавления.
3. **Поддержка дубликатов**: В списке могут повторяться элементы.
4. **Разные типы данных**: Список может содержать элементы разных типов.
5. **Индексация**: К элементам списка можно обращаться по индексу.

✅ Пример создания списка:
```python
fruits = ["apple", "banana", "cherry"]
print(fruits)  
numbers = [1, 2, 3]
print(numbers)
```

📌 ХРАНЕНИЕ РАЗНЫХ ТИПОВ ЭЛЕМЕНТОВ В СПИСКЕ
```python
mixed_list = [42, "Python", 3.14, True, [1, 2, 3]]
print(mixed_list)
```

📌 СОЗДАНИЕ СПИСКОВ
✅- **Создание списка с элементами**
```python
my_list = [1, 2, 3, 4]
print(my_list)
```
✅- **Создание пустого списка**
```python
empty_list = []
print(empty_list)
my_list = list()
print(my_list)
```

📌 ИНДЕКСАЦИЯ СПИСКОВ
Доступ к элементам списка осуществляется по индексу:
```python
my_list = ["apple", "banana", "cherry", "date"]
print(my_list[0])  # Первый элемент
print(my_list[-1])  # Последний элемент
```

📌 СРЕЗЫ СПИСКОВ
Срез позволяет выбрать часть списка:
```python
my_list = [0, 1, 2, 3, 4, 5, 6]
print(my_list[1:4])  # С 1-го по 4-й элемент (не включительно)
print(my_list[::-1])  # Перевернутый список
```

📌 ИЗМЕНЕНИЕ ЭЛЕМЕНТОВ СПИСКА
✅ Изменение одного элемента:
```python
my_list = ["apple", "banana", "cherry"]
my_list[1] = "blueberry"
print(my_list)
```
✅ Изменение среза:
```python
my_list = [10, 20, 30, 40, 50]
my_list[1:3] = [200, 300]
print(my_list)
```

📌📌 ОПЕРАЦИИ СО СПИСКАМИ

📌 **Объединение**
```python
list1 = [1, 2, 3]
list2 = [4, 5, 6]
combined_list = list1 + list2
print(combined_list)
```
📌 **Повторение списка**
```python
repeated_list = [0] * 5
print(repeated_list)
```
📌 **Проверка наличия элемента**
```python
my_list = [1, 2, 3, 4, 5]
print(3 in my_list)
```
📌 **Длина списка**
```python
print(len(my_list))
```
📌 **Преобразование в список**
```python
word = "python"
my_list = list(word)
print(my_list)
```
📌 **Сравнение списков**
```python
list1 = [1, 2, 3]
list2 = [1, 2, 3]
print(list1 == list2)  # True
```

📌📌 ЦИКЛ FOR СО СПИСКАМИ
```python
my_list = [1, 2, 3, 4, 5]
for item in my_list:
    print(item)
```

✅✅ ПРАКТИЧЕСКИЕ ЗАДАНИЯ**
✅ 1. Напишите программу, которая выводит все числа от 1 до n (введённого пользователем), которые делятся на 3.
```python
n = int(input("Введите число: "))
for i in range(1, n + 1):
    if i % 3 == 0:
        print(i)
```
✅ 2. Напишите программу, которая обрабатывает список строк и выводит имена, длина которых больше средней длины имен в списке.
```python
names = ["John", "Bob", "Alice", "Ann", "Mark"]
avg_length = sum(len(name) for name in names) / len(names)
print("Имена длиннее средней длины:", [name for name in names if len(name) > avg_length])
```

