🔸🔸🔸 УРОК 15. СПИСКИ И РАБОТА С ПАМЯТЬЮ 🔸🔸🔸


📌 ИЗМЕНЯЕМЫЕ ТИПЫ ДАННЫХ
🔸 Позволяют изменять содержимое без создания нового объекта.
🔸 Передаются по ссылке (в функции тоже).
🔸 Экономят память.

✅ Примеры: списки, множества, словари.
list1 = [1, 2, 3]
list1[0] = 100  # объект изменяется


📌 ФУНКЦИЯ `id()`
Возвращает адрес объекта в памяти.

a = [1, 2, 3]
b = a
print(id(a), id(b))  # одинаково
c = [1, 2, 3]
print(id(c))  # другой id


📌 ПРИСВАИВАНИЕ
🔸 Неизменяемые объекты: создаётся новая копия при изменении.
🔸 Изменяемые объекты: копируется ссылка.

list_a = [1, 2, 3]
list_b = list_a
list_b.append(4)
print(list_a)  # [1, 2, 3, 4]


📌  ВЛОЖЕННЫЕ КОЛЛЕКЦИИ

nested = [[1, 2], [3, 4], [5, 6]]
print(nested[0][1])  # доступ к 2

📍 Изменения:

nested[0][1] = 9
print(nested)  # [[1, 9], [3, 4], [5, 6]]


📌 ИТЕРАЦИЯ ПО ВЛОЖЕННЫМ СПИСКАМ

for sublist in nested:
    for item in sublist:
        print(item)

📍С изменением:

for i, sublist in enumerate(nested):
    for j, item in enumerate(sublist):
        nested[i][j] = item * 2

📌 ОПЕРАТОР `del`

Удаляет элементы по индексу или переменные целиком.

del nested[0]          # удаление по индексу
del nested[1][0]       # удаление вложенного элемента
del nested[:]          # очистка списка


📌 КОПИРОВАНИЕ СПИСКА

📍Присваивание: ссылка на тот же объект.

copied = original  # не копия

📍Поверхностная копия:**

copied = original.copy()
copied = original[:]
copied = list(original)

📍Глубокая копия:

import copy
deep = copy.deepcopy(original)
