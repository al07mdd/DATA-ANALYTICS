üî∏üî∏üî∏ –£–†–û–ö 16. LIST COMPREHENSION. –°–¢–ï–ö –ò –û–ß–ï–†–ï–î–¨ üî∏üî∏üî∏

üìå LIST COMPREHENSION

List comprehension ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.

üìç –°–∏–Ω—Ç–∞–∫—Å–∏—Å:
new_list = [expression for item in iterable]

‚úÖ
numbers = [1, 2, 3, 4]
squares = [x ** 2 for x in numbers]  # [1, 4, 9, 16]


üìå –° –£–°–õ–û–í–ò–ï–ú IF

üìç–°–∏–Ω—Ç–∞–∫—Å–∏—Å:
[expression for item in iterable if condition]

‚úÖ
even = [x for x in range(10) if x % 2 == 0]


üìå –° –£–°–õ–û–í–ò–ï–ú IF-ELSE

üìç–°–∏–Ω—Ç–∞–∫—Å–∏—Å:
[expr1 if condition else expr2 for item in iterable]

‚úÖ
numbers = [1, 2, 3, 4]
res = [x if x % 2 == 0 else -1 for x in numbers]  # [-1, 2, -1, 4]


üìå –° –í–õ–û–ñ–ï–ù–ù–´–ú–ò –£–°–õ–û–í–ò–Ø–ú–ò

words = ["hi", "apple", "banana", "cat"]
result = [w if len(w) > 5 else ("medium" if len(w) >= 3 else "short") for w in words]


üìå –° –í–õ–û–ñ–ï–ù–ù–´–ú–ò –¶–ò–ö–õ–ê–ú–ò

pairs = [(x, y) for x in range(2) for y in range(3)]
# [(0,0), (0,1), (0,2), (1,0), (1,1), (1,2)]

‚úÖ –ü—Ä–∏–º–µ—Ä: —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –º–∞—Ç—Ä–∏—Ü—ã:

matrix = [[1, 2], [3, 4]]
flat = [num for row in matrix for num in row]


üìå –§–£–ù–ö–¶–ò–Ø ZIP()

names = ["Alice", "Bob"]
ages = [25, 30]
zipped = list(zip(names, ages))  # [("Alice", 25), ("Bob", 30)]


üìå –°–¢–ï–ö (STACK)

üìç –ü—Ä–∏–Ω—Ü–∏–ø LIFO (–ø–æ—Å–ª–µ–¥–Ω–∏–º –ø—Ä–∏—à—ë–ª ‚Äî –ø–µ—Ä–≤—ã–º —É—à—ë–ª)
stack = []
stack.append(1)
stack.append(2)
stack.pop()  # 2


üìå –û–ß–ï–†–ï–î–¨ (QUEUE)

üìç –ü—Ä–∏–Ω—Ü–∏–ø FIFO (–ø–µ—Ä–≤—ã–º –ø—Ä–∏—à—ë–ª ‚Äî –ø–µ—Ä–≤—ã–º —É—à—ë–ª)
from collections import deque
queue = deque()
queue.append(1)
queue.append(2)
queue.popleft()  # 1


üìå –£–°–¢–û–ô–ß–ò–í–û–°–¢–¨ –°–û–†–¢–ò–†–û–í–ö–ò

üìç –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å—Ç–æ–π—á–∏–≤–æ–π, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
words = ["apple", "dog", "banana"]
sorted_words = sorted(words, key=len)  # ['dog', 'apple', 'banana']

