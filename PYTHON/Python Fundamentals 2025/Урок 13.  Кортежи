🔸🔸🔸 УРОК 13. КОРТЕЖИ (TUPLE) 🔸🔸🔸

📌 1. ЧТО ТАКОЕ КОРТЕЖ

- Упорядоченная неизменяемая коллекция данных
- Поддерживает индексацию
- Хранит данные разных типов
- Поддерживает дубликаты

✅ my_tuple = (1, 2, 3, "apple", True)
print(my_tuple)

📌 2. СОЗДАНИЕ КОРТЕЖА
✅ 
empty_tuple = ()
single_element = (5,)      # Обязательно с запятой
mixed_tuple = (1, "two", 3.0)

📌 3. ДОСТУП ПО ИНДЕКСУ
✅
my_tuple = (10, 20, 30, 40)
print(my_tuple[1])   # 20
print(my_tuple[-1])  # 40

📌 4. НЕИЗМЕНЯЕМОСТЬ
✅
my_tuple = (10, 20, 30)
# my_tuple[1] = 100  # ❌ TypeError

📌 5. ОПЕРАЦИИ С КОРТЕЖАМИ
✅
t1 = (1, 2)
t2 = (3, 4)
print(t1 + t2)          # ➕ объединение
print(t1 * 3)           # 🔁 повторение
print(2 in t1)          # 🔍 проверка наличия
print(len(t1))          # 📏 длина

📌 6. ПРЕОБРАЗОВАНИЕ
✅
🔸my_list = [1, 2, 3]
converted = tuple(my_list)

🔸my_tuple = (1, 2, 3)
converted_back = list(my_tuple)

📌 7. ЦИКЛ FOR С КОРТЕЖАМИ
✅
🔸my_tuple = (10, 20, 30)
for item in my_tuple:
    print(item)

📌 8. УПАКОВКА И РАСПАКОВКА
✅
🔸 Упаковка
packed = 1, 2, 3

🔸 Распаковка
a, b, c = packed
print(a, b, c)

🔸 Распаковка с *
numbers = [1, 2, 3, 4, 5]
a, *middle, b = numbers
print(a, middle, b)

📌 9. РАСПАКОВКА В ЦИКЛЕ
✅
🔸pairs = [(1, 'apple'), (2, 'banana')]
for num, fruit in pairs:
    print(f"{num}: {fruit}")

10. ФУНКЦИЯ enumerate()
✅
🔸fruits = ["apple", "banana", "cherry"]
for i, fruit in enumerate(fruits):
    print(f"{i}: {fruit}")

🔸 С указанием start
for i, lang in enumerate(("Python", "Java"), start=1):
    print(f"{i}: {lang}")

📌 11. ДОСТУП К СОСЕДНИМ ЭЛЕМЕНТАМ
✅
🔸numbers = [10, 20, 15, 30]
for i, val in enumerate(numbers[:-1]):
    if val > numbers[i + 1]:
        print(f"{val} > {numbers[i + 1]}")

📌 12. МЕТОДЫ КОРТЕЖЕЙ
✅
🔸 my_tuple = (1, 2, 3, 2, 4, 2)

🔸 Метод count() – сколько раз встречается значение
print(my_tuple.count(2))  # ➝ 3

🔸 Метод index() – индекс первого вхождения
print(my_tuple.index(2))        # ➝ 1
print(my_tuple.index(2, 2))     # ➝ 3 (поиск с индекса 2)
