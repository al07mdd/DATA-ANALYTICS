üî∏üî∏üî∏ –£–†–û–ö 23. –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø. –ê–ù–ù–û–¢–ê–¶–ò–ò –¢–ò–ü–û–í üî∏üî∏üî∏

---

üìåüìå –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ò DOCSTRINGS

üî∏ Docstrings ‚Äî —Å—Ç—Ä–æ–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–π (–≤ —Ç—Ä–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö).
üî∏ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

‚úÖ
def greet(name):
   
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.
    :param name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
 
    return f"Hello, {name}!"
```

üìåüìå –§–£–ù–ö–¶–ò–Ø `help()`

üî∏ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π.
üî∏ `help(print)` ‚Äî –≤—ã–≤–µ–¥–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ `print`
üî∏ `help()` ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫

---

üìåüìå –ê–ù–ù–û–¢–ê–¶–ò–ò –¢–ò–ü–û–í

üî∏ –ù–µ –≤–ª–∏—è—é—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–æ —É–ª—É—á—à–∞—é—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å, –∞–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –æ—Ç–ª–∞–¥–∫—É.

‚úÖ
def add(a: int, b: int) -> int:
    return a + b
```

‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
x: float = 3.14
name: str = "Alice"

---

üìå –ë–ê–ó–û–í–´–ï –¢–ò–ü–´

‚úÖ
def is_even(n: int) -> bool:
    return n % 2 == 0

‚úÖ
def greet(name: str) -> str:
    return f"Hello, {name}!"

---

üìå –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•

‚úÖ –°–ø–∏—Å–∫–∏:
def squares(numbers: list[int]) -> list[int]:
    return [n ** 2 for n in numbers]

‚úÖ –ö–æ—Ä—Ç–µ–∂–∏:

def info() -> tuple[str, float]:
    return "Bob", 4.9

‚úÖ –°–ª–æ–≤–∞—Ä–∏:

def count_words(text: str) -> dict[str, int]:
    words = text.split()
    return {w: words.count(w) for w in words}

---

üìå –ê–ù–ù–û–¢–ê–¶–ò–ò `Any`, `Union`, `Optional`

‚úÖ –õ—é–±–æ–π —Ç–∏–ø:

from typing import Any

def log(data: Any) -> str:
    return f"Data: {data}"

‚úÖ –û–¥–∏–Ω –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∏–ø–æ–≤:

from typing import Union

def calc(x: Union[int, float]) -> float:
    return x * x

‚úÖ –ú–æ–∂–µ—Ç –±—ã—Ç—å `None`:

from typing import Optional

def get_name(id: int) -> Optional[str]:
    users = {1: "Alice"}
    return users.get(id)

‚úÖ `Callable` (—Ñ—É–Ω–∫—Ü–∏—è –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç):

from typing import Callable

def apply(func: Callable[[int], int], nums: list[int]) -> list[int]:
    return [func(n) for n in nums]
    
---

üìå –ü–ï–†–ï–î–ê–ß–ê –ò–ó–ú–ï–ù–Ø–ï–ú–´–• –ò –ù–ï–ò–ó–ú–ï–ù–Ø–ï–ú–´–• –û–ë–™–ï–ö–¢–û–í

üî∏ –ù–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ (int, str): —Å–æ–∑–¥–∞—ë—Ç—Å—è –∫–æ–ø–∏—è
üî∏ –ò–∑–º–µ–Ω—è–µ–º—ã–µ (list, dict): –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Å—Å—ã–ª–∫–∞

‚úÖ
def modify_val(n: int):
    n += 1

x = 10
modify_val(x)
print(x)  # 10


‚úÖ
def modify_list(lst: list):
    lst.append(99)

nums = [1, 2]
modify_list(nums)
print(nums)  # [1, 2, 99]

---

üìåüìå –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –†–ê–ë–û–¢–ê

‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–µ–π

from typing import Callable

def apply_to_all(func: Callable[[int], int], items: list[int]) -> list[int]:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º.
    :param func: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    :param items: —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
    :return: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    """
    return [func(x) for x in items]

numbers = [1, 2, 3, 4, 5]
result = apply_to_all(lambda x: x * 2, numbers)
print(result)  # [2, 4, 6, 8, 10]

---
