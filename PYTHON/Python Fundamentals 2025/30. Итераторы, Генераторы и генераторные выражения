📌📌 УРОК 29. ИТЕРАТОРЫ, ГЕНЕРАТОРЫ И ГЕНЕРАТОРНЫЕ ВЫРАЖЕНИЯ 📌📌

📌 ИТЕРАТОР

🔸Итерируемый объект  — может содержать множество элементов и предоставляет их по одному.

🔸Итератор — объект, который:

🔸* Содержит ссылку на итерируемый объект,
🔸* Хранит текущую позицию,
🔸* Позволяет получать элементы по одному.

Используется для эффективной обработки данных, особенно больших.

📌 МЕТОДЫ `iter()` И `next()`

🔸Магические методы:

* `__iter__()` — создаёт итератор.
* `__next__()` — возвращает следующий элемент.

✅
numbers = [10, 20, 30]
iterator = iter(numbers)
print(next(iterator))
print(next(iterator))
print(next(iterator))
```

🔸 Особенность: повторное использование итератора невозможно — он "исчерпывается". 🔸

📌 ОШИБКА `StopIteration`

🔸 Возникает, когда элементы в итераторе заканчиваются.

✅
numbers = [1, 2, 3]
iterator = iter(numbers)
print(next(iterator))
print(next(iterator))
print(next(iterator))
print(next(iterator, None))  # Возврат None вместо ошибки
```

---

📌 КАК РАБОТАЕТ `for`

🔸Цикл `for` в Python под капотом:

1. Вызывает `iter()` для объекта,
2. Вызывает `next()` — получает элемент,
3. Обрабатывает элемент,
4. Повторяет, пока не получит `StopIteration`.

✅
🔸for num in [10, 20, 30]:
    print(num)
```

🔸Аналог:
iterator = iter([10, 20, 30])
while True:
    try:
        print(next(iterator))
    except StopIteration:
        break
```

📌 МОДУЛЬ `itertools`

🔸 Для продвинутой работы с итераторами.

✅
import itertools

# count()
counter = itertools.count(start=1, step=10)
print(next(counter))

# cycle()
cycler = itertools.cycle(["A", "B"])
print(next(cycler))

# chain()
print(list(itertools.chain([1, 2], [3, 4])))

# product()
print(list(itertools.product([1, 2], ['A', 'B'])))

# permutations()
print(list(itertools.permutations(['A', 'B', 'C'], 2)))
```

📌 ГЕНЕРАТОР

🔸Генератор🔸 — итератор, создающий значения "на лету", а не заранее.

🔸* Использует `yield` вместо `return`
🔸* Возвращает объект генератора

✅
def generate_values():
    yield 1
    yield 2

gen = generate_values()
print(next(gen))
print(next(gen))
```

📌 ГЕНЕРАТОР С ПАРАМЕТРОМ

✅
def count_up_to(n):
    count = 1
    while count <= n:
        yield count
        count += 1

gen = count_up_to(5)
for num in gen:
    print(num)
```

📌 ГЕНЕРАТОРНОЕ ВЫРАЖЕНИЕ

🔸 Экономный аналог спискового включения, но в круглых скобках.

✅
squares = (x**2 for x in range(5))
print(next(squares))
```
✅
**Пример в `for`:**
for num in (x**2 for x in range(5)):
    print(num)
```
✅
**Оценка памяти:**
import sys
list_comp = [x**2 for x in range(10**6)]
gen_expr = (x**2 for x in range(10**6))
print(sys.getsizeof(list_comp))
print(sys.getsizeof(gen_expr))
```
