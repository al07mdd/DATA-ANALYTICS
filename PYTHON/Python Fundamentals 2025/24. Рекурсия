🔸🔸🔸 УРОК 24. РЕКУРСИЯ 🔸🔸🔸

📌📌 СТЕК ВЫЗОВОВ

📌 Что такое стек вызовов?
Стек вызовов (call stack) — структура данных, в которой хранятся активные вызовы функций. Работает по принципу LIFO (Last In, First Out).

🔹 Принципы работы:

🔸* Последней вызванной функцией управляют первой (LIFO)
🔸* Каждый вызов создаёт фрейм в стеке
🔸* После завершения функция удаляется из стека

✅ Пример:
def function_a():
    print("Начало A")
    function_b()
    print("Конец A")

def function_b():
    print("Начало B")
    function_c()
    print("Конец B")

def function_c():
    print("Начало C")
    print("Конец C")

function_a()


📌📌 РЕКУРСИЯ

📌 Что такое рекурсия?
Рекурсия — это функция, вызывающая саму себя. Используется для разбиения задачи на подзадачи.

📌 Компоненты:

🔸 ** Базовый случай** — завершает рекурсию
🔸 ** Рекурсивный случай** — вызывает саму себя с новыми параметрами

✅ Пример: счёт от `n` до 1
def countdown(n):
    if n <= 0:
        print("Конец!")
        return
    print(n)
    countdown(n - 1)

countdown(5)


✅ Пример с итерацией:

def countdown_iterative(n):
    while n > 0:
        print(n)
        n -= 1
    print("Конец!")

✅ RecursionError

def infinite_recursion():
    infinite_recursion()

⚠️ Бесконечная рекурсия вызывает RecursionError

✅ Пример: факториал

def factorial(n):
    if n == 0 or n == 1:
        return 1
    return n * factorial(n - 1)

print(factorial(5))  # 120

✅ Пример: бинарный поиск

def binary_search(arr, target, left, right):
    if left > right:
        return -1
    mid = (left + right) // 2
    if arr[mid] == target:
        return mid
    elif arr[mid] < target:
        return binary_search(arr, target, mid + 1, right)
    else:
        return binary_search(arr, target, left, mid - 1)

array = [1, 3, 5, 7, 9, 11, 13]
print(binary_search(array, 5, 0, len(array)-1))

✅ Хвостовая рекурсия

def factorial_tail(n, acc=1):
    if n <= 1:
        return acc
    return factorial_tail(n - 1, acc * n)

✅ Итеративная альтернатива:

def factorial_iterative(n):
    acc = 1
    while n > 1:
        acc *= n
        n -= 1
    return acc

📌📌 РЕКУРСИЯ VS ИТЕРАЦИЯ

📌 Когда рекурсия лучше:

🔸* Разбиение задачи на подзадачи
🔸* Обход деревьев, графов
🔸* Упрощённый, читаемый код

📌 Когда итерация лучше:

🔸* Эффективность
🔸* Работа с большими объёмами
🔸* Устранение переполнения стека

📌📌 ЗАДАЧИ ДЛЯ РЕШЕНИЯ РЕКУРСИЕЙ

🔸* Обход дерева (DFS)
🔸* Обход графа
🔸* Разбор вложенных выражений
🔸* Ханойские башни
🔸* Комбинаторика и подмножества
